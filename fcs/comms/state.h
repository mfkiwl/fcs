/*
Copyright (C) 2013 Ben Dyer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#ifndef _FCS_STATE_H
#define _FCS_STATE_H

/*
Pre-defined scope IDs. Devices start in scope 0, and after finding the
existing scope IDs in the global mission configuration they add their own.

Scope 0 is always considered local; it's an error for it to be sent over a
communications link of any kind.
*/
#define FCS_STATE_SCOPE_ID_PRIVATE 0u
#define FCS_STATE_SCOPE_ID_GLOBAL 1u

/*
fcs_state_t is a tuple containing a state record.
*/
struct fcs_state_t {
    /*
    Tuple clock is the last mission timestamp seen prior to the creation of
    this tuple.
    */
    uint32_t tuple_clock;

    /* As generated by util/crc32.c */
    uint32_t tuple_crc32;

    /*
    Scope ID is an 8-bit value identifying the scope to which the message
    applies. Each vehicle, relay and client has its own unique scope ID
    */
    uint8_t scope_id;

    /* Key ID is a unique 32-bit code identifying the message type. */
    uint32_t key_id;

    /*
    Value index allows lists of values (e.g. waypoints) to be created for the
    same key. The first value should be 0.
    */
    uint16_t value_index;

    /* Value length is the number of bytes in the data array used. */
    uint8_t value_length;

    /*
    Data follows -- up to 234 bytes to ensure a tuple can be packed into a
    message frame and still occupy fewer than 256 bytes.
    */
    uint8_t value[234];
};

#endif
